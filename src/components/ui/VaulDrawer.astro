---
interface Props {
  direction?: 'top' | 'bottom' | 'left' | 'right';
  id?: string;
  overlayClass?: string;
  drawerClass?: string;
  handleClass?: string;
}

const {
  direction = 'bottom',
  id = 'vaul-drawer',
  overlayClass = '',
  drawerClass = '',
  handleClass = ''
} = Astro.props;
---

<div id={`${id}-container`} class="vaul-drawer-container">
  <div id={`${id}-overlay`} class={`vaul-drawer-overlay ${overlayClass}`}></div>
  <div 
    id={id} 
    class={`vaul-drawer vaul-drawer-${direction} ${drawerClass}`}
    data-vaul-drawer-direction={direction}
  >
    <div class={`vaul-drawer-handle ${handleClass}`}>
      <span class="vaul-drawer-handle-hitarea"></span>
    </div>
    <div class="vaul-drawer-content">
      <slot />
    </div>
  </div>
</div>

<style>
  .vaul-drawer-container {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 50;
    overflow: hidden;
    display: flex;
    justify-content: center;
    visibility: hidden;
  }

  .vaul-drawer-container.open {
    visibility: visible;
    pointer-events: auto;
  }

  .vaul-drawer-overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.5s cubic-bezier(0.32, 0.72, 0, 1);
  }

  .vaul-drawer-container.open .vaul-drawer-overlay {
    opacity: 1;
  }

  .vaul-drawer {
    position: fixed;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px 8px 0 0;
    touch-action: none;
    will-change: transform;
    transition: transform 0.5s cubic-bezier(0.32, 0.72, 0, 1);
    display: flex;
    flex-direction: column;
    max-height: 90vh;
    overflow: hidden;
  }

  .vaul-drawer-bottom {
    bottom: 0;
    left: 0;
    right: 0;
    transform: translateY(100%);
    border-radius: 8px 8px 0 0;
  }

  .vaul-drawer-top {
    top: 0;
    left: 0;
    right: 0;
    transform: translateY(-100%);
    border-radius: 0 0 8px 8px;
  }

  .vaul-drawer-left {
    left: 0;
    top: 0;
    bottom: 0;
    transform: translateX(-100%);
    border-radius: 0 8px 8px 0;
  }

  .vaul-drawer-right {
    right: 0;
    top: 0;
    bottom: 0;
    transform: translateX(100%);
    border-radius: 8px 0 0 8px;
  }

  .vaul-drawer-container.open .vaul-drawer {
    transform: translate(0, 0);
  }

  .vaul-drawer-handle {
    display: block;
    position: relative;
    opacity: 0.7;
    background: #e2e2e4;
    margin-left: auto;
    margin-right: auto;
    height: 5px;
    width: 32px;
    border-radius: 1rem;
    touch-action: none;
    cursor: grab;
    margin-top: 8px;
    margin-bottom: 8px;
  }

  .vaul-drawer-handle:hover,
  .vaul-drawer-handle:active {
    opacity: 1;
  }

  .vaul-drawer-handle-hitarea {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 44px;
    height: 44px;
    touch-action: none;
  }

  .vaul-drawer-content {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
  }

  .vaul-drawer.dragging {
    transition: none;
  }

  @media (hover: hover) and (pointer: fine) {
    .vaul-drawer {
      user-select: none;
    }
  }
</style>

<script>
  class VaulDrawer {
    drawer: HTMLElement;
    overlay: HTMLElement;
    container: HTMLElement;
    handle: HTMLElement;
    isOpen: boolean = false;
    isDragging: boolean = false;
    startY: number = 0;
    startX: number = 0;
    currentY: number = 0;
    currentX: number = 0;
    direction: string;
    
    constructor(id: string) {
      this.drawer = document.getElementById(id) as HTMLElement;
      this.overlay = document.getElementById(`${id}-overlay`) as HTMLElement;
      this.container = document.getElementById(`${id}-container`) as HTMLElement;
      this.handle = this.drawer.querySelector('.vaul-drawer-handle') as HTMLElement;
      this.direction = this.drawer.dataset.vaulDrawerDirection || 'bottom';
      
      this.setupEventListeners();
    }
    
    setupEventListeners() {
      // Handle click on overlay
      this.overlay.addEventListener('click', () => this.close());
      
      // Handle pointer events for drag
      this.handle.addEventListener('pointerdown', this.onPointerDown.bind(this));
      document.addEventListener('pointermove', this.onPointerMove.bind(this));
      document.addEventListener('pointerup', this.onPointerUp.bind(this));
      document.addEventListener('pointercancel', this.onPointerUp.bind(this));
      
      // Handle keyboard escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });
    }
    
    onPointerDown(e: PointerEvent) {
      this.isDragging = true;
      this.drawer.classList.add('dragging');
      this.startY = e.clientY;
      this.startX = e.clientX;
      this.handle.style.cursor = 'grabbing';
    }
    
    onPointerMove(e: PointerEvent) {
      if (!this.isDragging) return;
      
      e.preventDefault();
      
      if (this.direction === 'bottom' || this.direction === 'top') {
        this.currentY = e.clientY - this.startY;
        
        // Constrain drag direction based on drawer direction
        if (this.direction === 'bottom' && this.currentY < 0) {
          this.currentY = 0;
        } else if (this.direction === 'top' && this.currentY > 0) {
          this.currentY = 0;
        }
        
        // Apply transform
        if (this.direction === 'bottom') {
          this.drawer.style.transform = `translateY(${this.currentY}px)`;
        } else {
          this.drawer.style.transform = `translateY(${this.currentY}px)`;
        }
      } else {
        this.currentX = e.clientX - this.startX;
        
        // Constrain drag direction based on drawer direction
        if (this.direction === 'right' && this.currentX < 0) {
          this.currentX = 0;
        } else if (this.direction === 'left' && this.currentX > 0) {
          this.currentX = 0;
        }
        
        // Apply transform
        if (this.direction === 'right') {
          this.drawer.style.transform = `translateX(${this.currentX}px)`;
        } else {
          this.drawer.style.transform = `translateX(${this.currentX}px)`;
        }
      }
    }
    
    onPointerUp(e: PointerEvent) {
      if (!this.isDragging) return;
      
      this.isDragging = false;
      this.drawer.classList.remove('dragging');
      this.handle.style.cursor = 'grab';
      
      // Determine whether to close or restore based on drag distance
      const isVertical = this.direction === 'bottom' || this.direction === 'top';
      const size = isVertical 
        ? this.drawer.offsetHeight
        : this.drawer.offsetWidth;
      
      let distance = isVertical ? Math.abs(this.currentY) : Math.abs(this.currentX);
      let threshold = size * 0.25; // 25% threshold for closing
      
      if (distance > threshold) {
        this.close();
      } else {
        this.restore();
      }
    }
    
    open() {
      this.isOpen = true;
      this.container.classList.add('open');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
    
    close() {
      this.isOpen = false;
      this.container.classList.remove('open');
      document.body.style.overflow = ''; // Restore background scrolling
      this.drawer.style.transform = '';
    }
    
    restore() {
      this.drawer.style.transform = '';
    }
  }
  
  // Initialize drawers when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const drawers = document.querySelectorAll('[id^="vaul-drawer"]');
    const drawersMap: Record<string, VaulDrawer> = {};
    
    drawers.forEach(drawer => {
      const id = drawer.id;
      drawersMap[id] = new VaulDrawer(id);
    });
    
    // Create global function to open drawers
    window.openVaulDrawer = (id: string) => {
      if (drawersMap[id]) {
        drawersMap[id].open();
      }
    };
    
    // Create global function to close drawers
    window.closeVaulDrawer = (id: string) => {
      if (drawersMap[id]) {
        drawersMap[id].close();
      }
    };
  });
  
  // Define type for the window object
  declare global {
    interface Window {
      openVaulDrawer: (id: string) => void;
      closeVaulDrawer: (id: string) => void;
    }
  }
</script> 