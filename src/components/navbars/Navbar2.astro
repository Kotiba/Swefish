---
import BrandLogo from "../BrandLogo.astro";
const { categories } = Astro.props;

// Define types for our menu categories
interface MenuCategory {
  id: string;
  title: string;
  items: any[];
}
---

<header class="fixed top-0 left-0 right-0 z-20 bg-white px-4 py-3 flex items-center justify-start border-b">
  <BrandLogo class="h-8 w-auto" />
</header>

<!-- Menu navigation with tabs -->
<nav class="fixed top-[52px] left-0 right-0 z-10 bg-white border-b">
  <div class="tab-bar-container">
    <!-- Menu button - absolutely positioned to prevent any movement -->
    <div class="hamburger-container">
      <button id="hamburger-menu" class="p-3 transition-colors hover:text-black focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="4" x2="20" y1="12" y2="12" />
          <line x1="4" x2="20" y1="6" y2="6" />
          <line x1="4" x2="20" y1="18" y2="18" />
        </svg>
      </button>
    </div>
    
    <!-- Scrollable tabs container - this is hidden when menu opens -->
    <div class="tabs-container flex overflow-x-auto scrollbar-hide pb-2 relative transition-opacity duration-200">
      {categories.map((category: MenuCategory, index: number) => (
        <a 
          href={`#${category.id}`}
          class="tab-link flex-shrink-0 px-4 py-3 text-base font-medium whitespace-nowrap transition-colors relative"
          data-section-id={category.id}
        >
          {category.title}
          <span class="tab-indicator absolute bottom-0 left-0 w-full h-0.5 scale-x-0 transition-transform duration-300 bg-black"></span>
        </a>
      ))}
    </div>
  </div>
  
  <!-- Vertical menu (hidden by default) - positioned directly UNDER the tab bar -->
  <div id="vertical-menu" class="vertical-menu w-full bg-white shadow-md border-t">
    <div class="py-2 px-4">
      {categories.map((category: MenuCategory) => (
        <a 
          href={`#${category.id}`}
          class="block w-full text-left py-3 border-b border-gray-100 hover:bg-gray-50"
          data-section-id={category.id}
        >
          {category.title}
        </a>
      ))}
    </div>
  </div>
</nav>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  /* Set active state for tab links */
  .tab-link {
    color: #6b7280; /* Default gray color */
  }
  
  .tab-link[data-active="true"] {
    color: black;
  }
  
  .tab-link[data-active="true"] .tab-indicator {
    transform: scaleX(1);
  }
  
  /* Vertical menu animation */
  .vertical-menu {
    transform: translateY(-20px);
    opacity: 0;
    visibility: hidden;
    transition: transform 0.3s cubic-bezier(0.25, 1, 0.5, 1), 
                opacity 0.2s ease,
                visibility 0s linear 0.3s;
    height: 0;
    overflow: hidden;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 30;
  }
  
  .vertical-menu.open {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
    transition: transform 0.3s cubic-bezier(0.25, 1, 0.5, 1), 
                opacity 0.2s ease,
                visibility 0s linear 0s;
    height: auto;
  }
  
  /* Absolutely position the hamburger to prevent any movement */
  .hamburger-container {
    position: absolute;
    left: 0;
    top: 0;
    width: 56px;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    border-right: 1px solid #e5e7eb; /* Add right border */
  }
  
  /* Ensure tab bar maintains consistent height */
  .tab-bar-container {
    position: relative;
    height: 56px; /* Fixed height to match tabs */
  }
  
  /* Add padding to tabs container to make room for hamburger */
  .tabs-container {
    position: absolute;
    left: 56px; /* Match hamburger container width */
    right: 0;
    padding-left: 0; /* Remove the previous padding */
    overflow-x: auto;
  }

  /* Native smooth scrolling */
  :global(html) {
    scroll-behavior: smooth;
  }
  
  :global(section[id]) {
    scroll-margin-top: 110px; /* Adjust based on header + nav height */
  }
</style>

<script>
  // Simple script for handling navigation and scrollspy
  document.addEventListener('DOMContentLoaded', () => {
    const hamburgerBtn = document.getElementById('hamburger-menu');
    const verticalMenu = document.getElementById('vertical-menu');
    const tabsContainer = document.querySelector('.tabs-container');
    const tabLinks = document.querySelectorAll('.tab-link');
    const sections = Array.from(document.querySelectorAll('section[id]'));
    let isVerticalMenuOpen = false;
    let isManuallyScrolling = false;
    let scrollTimeout: ReturnType<typeof setTimeout> | null = null;
    
    // Toggle vertical menu
    function toggleVerticalMenu() {
      isVerticalMenuOpen = !isVerticalMenuOpen;
      
      if (isVerticalMenuOpen) {
        // Hide tabs container
        tabsContainer?.classList.add('invisible', 'opacity-0');
        
        // Show vertical menu
        verticalMenu?.classList.add('open');
        
        // Highlight hamburger button
        hamburgerBtn?.classList.add('text-black');
      } else {
        // Show tabs container
        tabsContainer?.classList.remove('invisible', 'opacity-0');
        
        // Hide vertical menu
        verticalMenu?.classList.remove('open');
        
        // Reset hamburger button
        hamburgerBtn?.classList.remove('text-black');
      }
    }
    
    // Hamburger menu click event
    hamburgerBtn?.addEventListener('click', toggleVerticalMenu);
    
    // Close vertical menu when clicking a link
    verticalMenu?.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        if (isVerticalMenuOpen) {
          toggleVerticalMenu();
        }
      });
    });
    
    // Add click handler for tab links to prevent default when manually clicking
    tabLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        // Set a flag to indicate we're manually navigating
        isManuallyScrolling = true;
        
        // Clear any existing timeout
        if (scrollTimeout) {
          clearTimeout(scrollTimeout);
        }
        
        // Reset the flag after animation completes
        scrollTimeout = setTimeout(() => {
          isManuallyScrolling = false;
        }, 500); // Adjust based on your animation duration
      });
    });
    
    // Simple scrollspy with Intersection Observer
    const navbarHeight = 110; // Approximate header + nav height
    
    const observerOptions = {
      root: null,
      rootMargin: `-${navbarHeight}px 0px -50% 0px`,
      threshold: 0.1
    };
    
    // Debounce function to limit how often the callback runs
    function debounce(func: Function, wait = 50) {
      let timeout: ReturnType<typeof setTimeout> | null = null;
      return (...args: any[]) => {
        if (timeout) clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
      };
    }
    
    const observerCallback = debounce((entries: IntersectionObserverEntry[]) => {
      // Skip updating if we're manually scrolling
      if (isManuallyScrolling) return;
      
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          
          // Update active tab
          tabLinks.forEach(link => {
            if (link.getAttribute('data-section-id') === sectionId) {
              link.setAttribute('data-active', 'true');
              // Scroll the tab into view if needed, but not during manual navigation
              if (!isManuallyScrolling) {
                ensureTabVisible(link);
              }
            } else {
              link.setAttribute('data-active', 'false');
            }
          });
        }
      });
    });
    
    // Simple function to ensure the active tab is visible
    function ensureTabVisible(tabElement: Element): void {
      // Skip if we're manually scrolling to prevent conflicts
      if (isManuallyScrolling) return;
      
      const container = tabElement.closest('.tabs-container');
      if (container) {
        const tabRect = tabElement.getBoundingClientRect();
        const containerRect = container.getBoundingClientRect();
        
        // Use smoother scrolling with behavior: 'smooth'
        if (tabRect.left < containerRect.left) {
          container.scrollTo({
            left: container.scrollLeft + tabRect.left - containerRect.left - 20,
            behavior: 'smooth'
          });
        } else if (tabRect.right > containerRect.right) {
          container.scrollTo({
            left: container.scrollLeft + tabRect.right - containerRect.right + 20,
            behavior: 'smooth'
          });
        }
      }
    }
    
    // Create and start the observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    
    // Start observing each section
    sections.forEach(section => {
      observer.observe(section);
    });
    
    // Initialize by highlighting visible section on page load
    setTimeout(() => {
      // Find the section that's most visible
      const currentSection = sections.find(section => {
        const rect = section.getBoundingClientRect();
        return rect.top < window.innerHeight * 0.5 && rect.bottom > navbarHeight;
      });
      
      if (currentSection) {
        tabLinks.forEach(link => {
          const isActive = link.getAttribute('data-section-id') === currentSection.id;
          link.setAttribute('data-active', isActive ? 'true' : 'false');
          if (isActive) ensureTabVisible(link);
        });
      } else if (sections.length > 0) {
        // If no section is visible, highlight the first one
        const firstTab = document.querySelector(`.tab-link[data-section-id="${sections[0].id}"]`);
        if (firstTab) {
          firstTab.setAttribute('data-active', 'true');
        }
      }
    }, 100);
  });
</script>

