---
import Tag from "./Tag.astro";

interface WeightOption {
  weight: string;
  price: number;
}

const { 
  title, 
  description, 
  price, 
  image, 
  isTopRated = false, 
  fullWidth = false,
  weightOptions = [] as WeightOption[]
} = Astro.props;

// Format price to have 2 decimal places
const formattedPrice = price.toFixed(2);

// Check if we have weight-based pricing
const hasWeightOptions = weightOptions.length > 0;
---

{fullWidth ? (
  <div class="col-span-2">
    <div class="bg-white rounded-xl overflow-hidden shadow-sm hover:bg-[#FAFAFA]">
      <div class="flex gap-4 p-4">
        <div class="w-28 h-28 sm:w-36 sm:h-36 md:w-56 md:h-56 bg-gray-200 flex-shrink-0 rounded-lg overflow-hidden">
          <img src={image || "/placeholder.svg"} alt={title} class="w-full h-full object-cover" />
        </div>
        <div class="flex-1 min-w-0">
          <div class="flex items-start gap-2 flex-wrap">
            <h3 class="text-base sm:text-lg font-medium text-gray-900 break-words">{title}</h3>
            {isTopRated && <Tag text="Top rated" />}
          </div>
          <p class="text-sm sm:text-base text-gray-600 mt-1 line-clamp-2">{description}</p>
          
          {hasWeightOptions ? (
            <div class="mt-3 flex flex-wrap gap-2">
              {weightOptions.map((option: WeightOption) => (
                <div class="px-3 py-1 bg-gray-50 rounded-full text-xs sm:text-sm">
                  <span class="font-medium text-gray-800">{option.weight}</span>
                  <span class="mx-1 text-gray-400">•</span>
                  <span class="text-gray-900">EGP {option.price.toFixed(2)}</span>
                </div>
              ))}
            </div>
          ) : (
            <p class="text-sm font-medium text-gray-900 mt-2">EGP {formattedPrice}</p>
          )}
        </div>
      </div>
    </div>
  </div>
) : (
  <div class="bg-white rounded-xl overflow-hidden shadow-sm hover:bg-[#FAFAFA]">
    <div class="relative h-36 bg-gray-200">
      <img src={image || "/placeholder.svg"} alt={title} class="w-full h-full object-cover" />
      {isTopRated && (
        <div class="absolute bottom-2 left-2">
          <Tag text="Top rated" variant="white" />
        </div>
      )}
    </div>
    <div class="p-3">
      <h3 class="font-medium text-sm">{title}</h3>
      
      {hasWeightOptions ? (
        <div class="mt-2 flex flex-wrap gap-1">
          {weightOptions.map((option: WeightOption) => (
            <div class="px-2 py-0.5 bg-gray-50 rounded-full text-xs mt-1">
              <span class="font-medium text-gray-800">{option.weight}</span>
              <span class="mx-0.5 text-gray-400">•</span>
              <span class="text-gray-900">EGP {option.price.toFixed(2)}</span>
            </div>
          ))}
        </div>
      ) : (
        <p class="text-sm font-medium text-gray-900 mt-1">EGP {formattedPrice}</p>
      )}
    </div>
  </div>
)}
