---
import BrandLogo from "../BrandLogo.astro";
const { categories } = Astro.props;

// Define types for our menu categories
interface MenuCategory {
  id: string;
  title: string;
  items: any[];
}
---

<header class="fixed top-0 left-0 right-0 z-20 bg-white px-4 py-3 flex items-center justify-between border-b">
  <div class="flex items-center">
    <button class="w-10 h-10 rounded-full bg-gray-50 flex items-center justify-center mr-4">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="m12 19-7-7 7-7" />
        <path d="M19 12H5" />
      </svg>
    </button>
    <BrandLogo class="h-8 w-auto" />
  </div>
  <div class="flex items-center space-x-2">
    <button class="w-10 h-10 rounded-full bg-gray-50 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
      </svg>
    </button>
    <button class="w-10 h-10 rounded-full bg-gray-50 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
        <polyline points="16 6 12 2 8 6" />
        <line x1="12" x2="12" y1="2" y2="15" />
      </svg>
    </button>
    <button class="w-10 h-10 rounded-full bg-gray-50 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8" />
        <path d="m21 21-4.3-4.3" />
      </svg>
    </button>
  </div>
</header>

<!-- Menu navigation with tabs -->
<nav class="fixed top-16 left-0 right-0 z-10 bg-white border-b">
  <div class="tab-bar-container">
    <!-- Menu button - absolutely positioned to prevent any movement -->
    <div class="hamburger-container">
      <button id="hamburger-menu" class="p-3 transition-colors hover:text-black focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="4" x2="20" y1="12" y2="12" />
          <line x1="4" x2="20" y1="6" y2="6" />
          <line x1="4" x2="20" y1="18" y2="18" />
        </svg>
      </button>
    </div>
    
    <!-- Scrollable tabs container - this is hidden when menu opens -->
    <div class="tabs-container flex overflow-x-auto scrollbar-hide pb-2 relative transition-opacity duration-200">
      {categories.map((category: MenuCategory, index: number) => (
        <button 
          data-tab={category.id} 
          class={`flex-shrink-0 px-4 py-3 text-base font-medium whitespace-nowrap transition-colors relative ${
            index === 0 ? 'text-black' : 'text-gray-500'
          }`}
        >
          <span class="tab-text">{category.title}</span>
          <div class={`tab-indicator absolute bottom-0 h-0.5 bg-black ${
            index === 0 ? '' : 'opacity-0'
          }`}></div>
        </button>
      ))}
    </div>
  </div>
  
  <!-- Vertical menu (hidden by default) - positioned directly UNDER the tab bar -->
  <div id="vertical-menu" class="vertical-menu w-full bg-white shadow-md border-t">
    <div class="py-2 px-4">
      {categories.map((category: MenuCategory) => (
        <button 
          data-vertical-tab={category.id} 
          class={`block w-full text-left py-3 border-b border-gray-100 ${
            category.id === categories[0].id ? 'font-medium' : ''
          }`}
        >
          {category.title}
        </button>
      ))}
    </div>
  </div>
</nav>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  /* Active tab indicator animation */
  .tab-indicator {
    transition: all 0.3s ease;
    /* Remove the left: 0 and w-full to make it match only text width */
    left: 0;
    width: 100%;
  }
  
  /* Vertical menu animation */
  .vertical-menu {
    transform: translateY(-20px);
    opacity: 0;
    visibility: hidden;
    transition: transform 0.3s cubic-bezier(0.25, 1, 0.5, 1), 
                opacity 0.2s ease,
                visibility 0s linear 0.3s;
    height: 0;
    overflow: hidden;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 30;
  }
  
  .vertical-menu.open {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
    transition: transform 0.3s cubic-bezier(0.25, 1, 0.5, 1), 
                opacity 0.2s ease,
                visibility 0s linear 0s;
    height: auto;
  }
  
  /* Absolutely position the hamburger to prevent any movement */
  .hamburger-container {
    position: absolute;
    left: 0;
    top: 0;
    width: 56px;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    border-right: 1px solid #e5e7eb; /* Add right border */
  }
  
  /* Ensure tab bar maintains consistent height */
  .tab-bar-container {
    position: relative;
    height: 56px; /* Fixed height to match tabs */
  }
  
  /* Add padding to tabs container to make room for hamburger */
  .tabs-container {
    position: absolute;
    left: 56px; /* Match hamburger container width */
    right: 0;
    padding-left: 0; /* Remove the previous padding */
    overflow-x: auto;
  }

  /* Simple smooth scrolling without snapping */
  :global(html) {
    scroll-behavior: smooth;
  }
  
  :global(section[id]) {
    scroll-margin-top: 112px; /* Adjust based on your header + nav height */
  }
</style>

<!-- Use client-side script to avoid TypeScript errors -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Get all tab buttons
    const tabButtons = document.querySelectorAll('[data-tab]');
    const hamburgerButton = document.getElementById('hamburger-menu');
    const verticalMenu = document.getElementById('vertical-menu');
    const tabsContainer = document.querySelector('.tabs-container');
    let isVerticalMenuOpen = false;
    
    if (!hamburgerButton || !verticalMenu || !tabsContainer) return;
    
    // Function to handle tab selection
    function selectTab(tabElement) {
      // Remove active class from all tabs
      tabButtons.forEach(btn => {
        btn.classList.remove('text-black');
        btn.classList.add('text-gray-500');
        const indicator = btn.querySelector('.tab-indicator');
        if (indicator) indicator.classList.add('opacity-0');
      });
      
      // Add active class to clicked tab
      tabElement.classList.remove('text-gray-500');
      tabElement.classList.add('text-black');
      const indicator = tabElement.querySelector('.tab-indicator');
      if (indicator) indicator.classList.remove('opacity-0');
      
      // Update indicator width to match text width
      updateTabIndicator(tabElement);
      
      // Scroll the tab into view (centered)
      const scrollLeft = tabElement.offsetLeft - (tabsContainer.clientWidth / 2) + (tabElement.clientWidth / 2);
      tabsContainer.scrollTo({
        left: scrollLeft,
        behavior: 'smooth'
      });
      
      // Close vertical menu if open
      if (isVerticalMenuOpen) {
        toggleVerticalMenu();
      }
      
      // Scroll to the corresponding section
      const tabId = tabElement.getAttribute('data-tab');
      if (tabId) {
        const section = document.getElementById(tabId);
        if (section) {
          section.scrollIntoView({ behavior: 'smooth' });
        }
      }
    }
    
    // Function to update tab indicator width to match text width
    function updateTabIndicator(tabElement) {
      const textElement = tabElement.querySelector('.tab-text');
      const indicator = tabElement.querySelector('.tab-indicator');
      
      if (textElement && indicator) {
        const textWidth = textElement.offsetWidth;
        const textLeft = textElement.offsetLeft;
        
        // Set indicator width and position to match text
        indicator.style.width = `${textWidth}px`;
        indicator.style.left = `${textLeft}px`;
      }
    }
    
    // Initialize all tab indicators
    tabButtons.forEach(button => {
      if (button.classList.contains('text-black')) {
        updateTabIndicator(button);
      }
    });
    
    // Add click event to each tab
    tabButtons.forEach(button => {
      button.addEventListener('click', function() {
        selectTab(this);
      });
    });
    
    // Toggle vertical menu
    function toggleVerticalMenu() {
      isVerticalMenuOpen = !isVerticalMenuOpen;
      
      if (isVerticalMenuOpen) {
        // Hide tabs container
        tabsContainer.classList.add('invisible', 'opacity-0');
        
        // Show vertical menu
        verticalMenu.classList.add('open');
        
        // Highlight hamburger button
        hamburgerButton.classList.add('text-black');
      } else {
        // Show tabs container
        tabsContainer.classList.remove('invisible', 'opacity-0');
        
        // Hide vertical menu
        verticalMenu.classList.remove('open');
        
        // Reset hamburger button
        hamburgerButton.classList.remove('text-black');
      }
    }
    
    // Hamburger menu click event
    hamburgerButton.addEventListener('click', toggleVerticalMenu);
    
    // Vertical menu tab click events
    const verticalTabButtons = document.querySelectorAll('[data-vertical-tab]');
    verticalTabButtons.forEach(button => {
      button.addEventListener('click', function() {
        const tabId = this.getAttribute('data-vertical-tab');
        if (tabId) {
          const horizontalTab = document.querySelector(`[data-tab="${tabId}"]`);
          if (horizontalTab) {
            selectTab(horizontalTab);
          }
        }
      });
    });
    
    // Add touch swiping for tabs
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;
    let isSwiping = false;
    
    tabsContainer.addEventListener('touchstart', function(e) {
      touchStartX = e.changedTouches[0].screenX;
      touchStartY = e.changedTouches[0].screenY;
      isSwiping = true;
    }, { passive: true });

    tabsContainer.addEventListener('touchmove', function(e) {
      if (!isSwiping) return;
      
      const currentX = e.changedTouches[0].screenX;
      const currentY = e.changedTouches[0].screenY;
      
      // Calculate horizontal and vertical distance
      const deltaX = Math.abs(currentX - touchStartX);
      const deltaY = Math.abs(currentY - touchStartY);
      
      // If horizontal movement is greater than vertical, it's likely a tab swipe
      // so prevent default to avoid page scrolling interference
      if (deltaX > deltaY && deltaX > 10) {
        e.preventDefault();
      }
    }, { passive: false });
    
    tabsContainer.addEventListener('touchend', function(e) {
      if (!isSwiping) return;
      
      touchEndX = e.changedTouches[0].screenX;
      touchEndY = e.changedTouches[0].screenY;
      
      // Only handle swipe if it's primarily horizontal
      const deltaX = Math.abs(touchEndX - touchStartX);
      const deltaY = Math.abs(touchEndY - touchStartY);
      
      if (deltaX > deltaY && deltaX > 30) {
        handleSwipe();
      }
      
      isSwiping = false;
    }, { passive: true });
    
    function handleSwipe() {
      const currentActiveTab = document.querySelector('[data-tab].text-black');
      if (!currentActiveTab) return;
      
      const allTabs = Array.from(tabButtons);
      const currentIndex = allTabs.indexOf(currentActiveTab);
      
      if (touchEndX < touchStartX - 30 && currentIndex < allTabs.length - 1) {
        // Swipe left - go to next tab
        selectTab(allTabs[currentIndex + 1]);
      }
      
      if (touchEndX > touchStartX + 30 && currentIndex > 0) {
        // Swipe right - go to previous tab
        selectTab(allTabs[currentIndex - 1]);
      }
    }
    
    // Implement scrollspy using Intersection Observer for better performance
    const navbarHeight = document.querySelector('header').offsetHeight + 
                         document.querySelector('nav').offsetHeight;
    
    // Create an observer for each section
    const sections = Array.from(document.querySelectorAll('section[id]'));
    let currentActiveSection = null;
    
    // Options for Intersection Observer
    const observerOptions = {
      root: null, // Use the viewport
      rootMargin: `-${navbarHeight}px 0px -50% 0px`, // Adjust for navbar height
      threshold: 0.1 // Low threshold for better responsiveness
    };
    
    // Callback when section visibility changes
    const observerCallback = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          
          // Only update if we have a new section
          if (currentActiveSection !== sectionId) {
            currentActiveSection = sectionId;
            
            // Update active tab
            const activeTab = document.querySelector(`[data-tab="${sectionId}"]`);
            if (activeTab && !activeTab.classList.contains('text-black')) {
              selectTab(activeTab);
            }
          }
        }
      });
    };
    
    // Create and start the observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    
    // Start observing each section
    sections.forEach(section => {
      observer.observe(section);
    });
    
    // Initialize by highlighting the first visible section
    setTimeout(() => {
      const visibleSection = sections.find(section => {
        const rect = section.getBoundingClientRect();
        return rect.top < window.innerHeight * 0.5 && rect.bottom > navbarHeight;
      });
      
      if (visibleSection) {
        const activeTab = document.querySelector(`[data-tab="${visibleSection.id}"]`);
        if (activeTab) {
          selectTab(activeTab);
        }
      }
    }, 100);
  });
</script>

