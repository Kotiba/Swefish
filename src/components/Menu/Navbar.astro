---

import BrandLogo from "../BrandLogo.astro";
const { categories } = Astro.props;
---

<header class="fixed top-0 left-0 right-0 bg-white shadow-md z-50">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <div class="flex items-center">
        <BrandLogo class="h-8 w-auto" />
      </div>
      
      <div class="hidden md:block">
        <div class="flex items-center space-x-4">
          {categories.map((category) => (
            <a
              href={`#${category.id}`}
              class="text-gray-700 hover:text-gray-900 px-3 py-2 text-sm font-medium transition-colors duration-200 hover:bg-gray-100 rounded-md"
            >
              {category.title}
            </a>
          ))}
        </div>
      </div>
      
      <div class="flex items-center space-x-2">
        <button class="p-2 rounded-full hover:bg-gray-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
        </button>
        <button class="p-2 rounded-full hover:bg-gray-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
          </svg>
        </button>
        <button class="p-2 rounded-full hover:bg-gray-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Mobile menu - horizontal scrolling categories -->
    <div class="md:hidden overflow-x-auto whitespace-nowrap py-2 border-t border-gray-200 scrollbar-hide -mx-4 px-4">
      <div class="inline-flex space-x-1 pb-1">
        {categories.map((category) => (
          <a
            href={`#${category.id}`}
            class="inline-block text-gray-700 hover:text-gray-900 px-3 py-2 text-sm font-medium rounded-md whitespace-nowrap flex-shrink-0 border border-gray-100 bg-white shadow-sm"
          >
            {category.title}
          </a>
        ))}
      </div>
    </div>
    
    <!-- <script>
      // Add touch scrolling support for mobile
      document.addEventListener('DOMContentLoaded', () => {
        const scrollContainer = document.querySelector('.overflow-x-auto');
        if (scrollContainer) {
          let isDown = false;
          let startX;
          let scrollLeft;

          scrollContainer.addEventListener('mousedown', (e) => {
            isDown = true;
            scrollContainer.classList.add('active');
            startX = e.pageX - scrollContainer.offsetLeft;
            scrollLeft = scrollContainer.scrollLeft;
          });

          scrollContainer.addEventListener('mouseleave', () => {
            isDown = false;
            scrollContainer.classList.remove('active');
          });

          scrollContainer.addEventListener('mouseup', () => {
            isDown = false;
            scrollContainer.classList.remove('active');
          });

          scrollContainer.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - scrollContainer.offsetLeft;
            const walk = (x - startX) * 2; // Scroll speed
            scrollContainer.scrollLeft = scrollLeft - walk;
          });

          // Touch events for mobile
          scrollContainer.addEventListener('touchstart', (e) => {
            isDown = true;
            startX = e.touches[0].pageX - scrollContainer.offsetLeft;
            scrollLeft = scrollContainer.scrollLeft;
          }, { passive: true });

          scrollContainer.addEventListener('touchend', () => {
            isDown = false;
          }, { passive: true });

          scrollContainer.addEventListener('touchmove', (e) => {
            if (!isDown) return;
            const x = e.touches[0].pageX - scrollContainer.offsetLeft;
            const walk = (x - startX) * 2;
            scrollContainer.scrollLeft = scrollLeft - walk;
          }, { passive: true });
        }
      });
    </script> -->
  </div>
</header>

<!-- <style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }

  .overflow-x-auto {
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }

  .overflow-x-auto.active {
    cursor: grabbing;
    cursor: -webkit-grabbing;
  }
</style> -->

