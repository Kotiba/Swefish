---
import Tag from "../Menu/Tag.astro";
import { Image } from "astro:assets";
import { getImage } from "../../utils/imageMap";
import type { WeightOption } from "../../utils/types";

const { 
  title, 
  description, 
  price, 
  image, 
  isTopRated = false, 
  fullWidth = false,
  weightOptions = [] as WeightOption[],
  hasMultiplePrices = false
} = Astro.props;

// Check if we have weight-based pricing
const hasWeightOptions = weightOptions?.length > 0;

// Get the lowest price from weight options if available
let lowestWeightPrice: number | null = null;
if (hasWeightOptions) {
  lowestWeightPrice = weightOptions.reduce((lowest: number | null, option: WeightOption) => 
    option.price !== undefined && (lowest === null || option.price < lowest) 
      ? option.price 
      : lowest, 
    null as number | null
  );
}

// Use base price or lowest weight price
const displayPrice = price !== undefined && price !== null 
  ? price 
  : lowestWeightPrice;

// Format price to have 2 decimal places only when needed
const formatPrice = (price: number | null | undefined): string => {
  if (price === null || price === undefined) return 'Price on Selection';
  return Number.isInteger(price) ? price.toString() : price.toFixed(2);
};

const formattedPrice = displayPrice !== undefined ? formatPrice(displayPrice) : 'Price on Selection';

// Get the actual image from the image reference
const imageSrc = getImage(image);
---

{fullWidth ? (
  <div class="col-span-2">
    <div class="bg-white rounded-xl overflow-hidden border border-gray-200 shadow-sm hover:bg-[#FAFAFA]">
      <div class="flex gap-4 p-4">
        <div class="w-28 h-28 sm:w-36 sm:h-36 md:w-56 md:h-56 bg-gray-200 flex-shrink-0 rounded-lg overflow-hidden flex items-center justify-center">
          <Image
            src={imageSrc}
            alt={title}
            class="w-full h-auto max-h-full object-contain"
            draggable={false}
            loading="eager"
            format="avif"
          />
        </div>
        <div class="flex-1 min-w-0">
          <div class="flex items-start gap-2 flex-wrap">
            <h3 class="text-base sm:text-lg font-medium text-gray-900 break-words">{title}</h3>
            {isTopRated && <Tag text="Top rated" />}
          </div>
          <p class="text-sm sm:text-base text-gray-600 mt-1 line-clamp-2">{description}</p>
          
          <p class="text-sm font-medium text-gray-900 mt-2">
            {displayPrice !== null 
              ? (hasMultiplePrices || hasWeightOptions ? `From EGP ${formattedPrice}` : `EGP ${formattedPrice}`) 
              : 'Price on Selection'}
          </p>
        </div>
      </div>
    </div>
  </div>
) : (
  <div class="bg-white rounded-xl overflow-hidden border border-gray-200 shadow-sm hover:bg-[#FAFAFA]">
    <div class="w-full h-40 bg-gray-200 overflow-hidden">
      <Image
        src={imageSrc}
        alt={title}
        class="w-full h-full object-cover"
        draggable={false}
        loading="eager"
        format="avif"
      />
      {isTopRated && (
        <div class="absolute bottom-2 left-2">
          <Tag text="Top rated" variant="white" />
        </div>
      )}
    </div>
    <div class="p-3">
      <h3 class="font-medium text-sm">{title}</h3>
      
      <p class="text-sm font-medium text-gray-900 mt-1">
        {displayPrice !== null 
          ? (hasMultiplePrices || hasWeightOptions ? `From EGP ${formattedPrice}` : `EGP ${formattedPrice}`) 
          : 'Price on Selection'}
      </p>
    </div>
  </div>
)}
