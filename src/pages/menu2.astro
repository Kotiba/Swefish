---
import MainLayout from "../layouts/MainLayout.astro";
import Navbar from "../components/navbars/Navbar4.astro";
import MenuItemVertical from "../components/MenuItems/MenuItemVertical.astro";
import MenuItemHorizontal from "../components/MenuItems/MenuItemHorizontal.astro";
import MenuItemDrawer from "../components/MenuItems/MenuItemDrawer";
import type { MenuData, MenuItem as MenuItemType } from "../utils/types";

// Import the static JSON data instead of fetching from API
import staticMenuData from "../data_files/menu.json";

// Cast the imported data to our type
const menuData: MenuData = staticMenuData as MenuData;
const { menuCategories } = menuData;

// Fallback message if we have no data (this shouldn't happen in production)
const noDataAvailable = menuCategories.length === 0 || 
  (menuCategories.length === 1 && menuCategories[0].id === "placeholder");

// Filter out any items with placeholder images that might cause errors
const processedCategories = menuCategories.map(category => {
  return {
    ...category,
    items: category.items.filter(item => item.image !== "placeholder" && item.image !== "menuPlaceholder")
  };
});

// Remove any empty categories after filtering
const filteredCategories = processedCategories.filter(category => category.items.length > 0);

// Use the filtered data if we have real data, otherwise show the warning
const displayCategories = noDataAvailable ? [] : filteredCategories;

// Categories that should use vertical layout
const verticalLayoutCategories = ['drinks', 'sauces'];
---

<MainLayout title="Menu 2">
  {noDataAvailable || displayCategories.length === 0 ? (
    <div class="container mx-auto px-4 pt-32 pb-20">
      <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert">
        <strong class="font-bold">Menu data is loading or not available.</strong>
        <span class="block sm:inline"> The menu data could not be loaded properly during the build process.</span>
        <p class="mt-2">
          This could be because:
          <ul class="list-disc pl-5 mt-1">
            <li>The build process couldn't connect to the database</li>
            <li>The build script encountered an error</li>
          </ul>
        </p>
      </div>
    </div>
  ) : (
    <>
      <Navbar categories={displayCategories} />
      
      <main class="pt-32 pb-20 container mx-auto px-4 md:px-8 max-w-7xl">

        
        {displayCategories.map((category) => {
          // Use vertical layout for drinks and sauces categories, horizontal for others
          const useVerticalLayout = verticalLayoutCategories.includes(category.id);
          
          return (
            <section id={category.id} class="mb-12 scroll-mt-24">
              <h2 class="text-2xl font-bold mb-6">{category.title}</h2>
              <div class={useVerticalLayout 
                ? "grid gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4" 
                : "grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
              }>
                {category.items.map((item: MenuItemType) => {
                  return (
                    <div 
                      class="cursor-pointer"
                      data-menu-item={JSON.stringify({
                        ...item,
                        image: item.image,
                        price: item.price === undefined ? null : item.price,
                        weightOptions: item.weightOptions?.map(option => ({
                          weight: option.weight,
                          price: typeof option.price === 'number' ? option.price : 0
                        }))
                      })}
                      onclick="handleMenuItemClick(this)"
                    >
                      {useVerticalLayout ? (
                        <MenuItemVertical {...item} />
                      ) : (
                        <MenuItemHorizontal {...item} />
                      )}
                    </div>
                  );
                })}
              </div>
            </section>
          );
        })}
      </main>

      <MenuItemDrawer client:load />
    </>
  )}
</MainLayout>

<script>
  import type { MenuItem } from '../utils/types';

  declare global {
    interface Window {
      handleMenuItemClick: (element: HTMLElement) => void;
      updateDrawerState: (item: MenuItem | null, isOpen: boolean) => void;
    }
  }

  // Make the click handler available globally
  window.handleMenuItemClick = (element: HTMLElement) => {
    try {
      const itemData = element.getAttribute('data-menu-item');
      if (itemData && window.updateDrawerState) {
        const parsedItem = JSON.parse(itemData);
        
        // Ensure the item has all required properties before passing to drawer
        const validItem: MenuItem = {
          title: parsedItem.title || '',
          description: parsedItem.description || '',
          price: parsedItem.price === undefined ? null : parsedItem.price,
          image: parsedItem.image || '',
          fullWidth: !!parsedItem.fullWidth,
          isTopRated: !!parsedItem.isTopRated,
          weightOptions: Array.isArray(parsedItem.weightOptions) 
            ? parsedItem.weightOptions.map((opt: any) => ({
                weight: opt.weight || '',
                price: typeof opt.price === 'number' ? opt.price : 0
              }))
            : undefined,
          allergens: Array.isArray(parsedItem.allergens) ? parsedItem.allergens : undefined
        };
        
        window.updateDrawerState(validItem, true);
      }
    } catch (error) {
      console.error('Error handling menu item click:', error);
    }
  };

  class MenuItemDrawerElement extends HTMLElement {
    constructor() {
      super();
      this.render();
    }

    static get observedAttributes(): string[] {
      return ['item', 'is-open'];
    }

    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
      if (oldValue !== newValue) {
        this.render();
      }
    }

    render() {
      const itemAttr = this.getAttribute('item');
      const item = itemAttr ? (JSON.parse(itemAttr) as MenuItem) : null;
      const isOpen = this.getAttribute('is-open') === 'true';
      
      if (window.updateDrawerState) {
        window.updateDrawerState(item, isOpen);
      }
    }
  }

  customElements.define('menu-item-drawer', MenuItemDrawerElement);
</script> 